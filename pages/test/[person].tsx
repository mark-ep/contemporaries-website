import { Box, Grid } from "@chakra-ui/react";
import { useQuery } from "@tanstack/react-query";
import { GetServerSideProps, NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useCallback, useEffect, useState } from "react";
import urlcat from "urlcat";
import Nav from "../../components/Nav";
import ProgressModal from "../../components/ProgressDialog";
import ScrollToTopButton from "../../components/ScrollToTopButton";


const Map = dynamic(
  () => import("../../Map"), { ssr: false }
)

type PersonData = {
  one_to_many?: string;
  many_to_one?: string;
  has_connections: boolean;
  name: string;
  description: string;
  gender: string;
  born_on?: string;
  died_on?: string;
  location?: [number, number];
  birth_year?: string;
  death_year?: string;
  wikipedia: string;
  image?: string;
  country?: string;
  rank: number;
  link: string;
  occupations: string[];
}

interface PersonPageProps {
  person: PersonData;
  jobKey: string;
}

interface QueryResponse {
  progress: number;
  total: number;
  state: string;
  done: boolean;
  contemporaries?: PersonData[];
}



export const PersonPage: NextPage<PersonPageProps> = ({ person, jobKey: initialKey }) => {
  const [done, setDone] = useState(false);
  const [key, setKey] = useState<string | undefined>(initialKey);
  const [contemporaries, setContemporaries] = useState<PersonData[]>([]);
  const router = useRouter();

  const { person: _, ...params } = router.query;

  useEffect(
    () => {
      setDone(false);
      setKey(initialKey);
      setContemporaries([]);
    },
    [initialKey]
  )
  const onGetMore = useCallback(
    () => setDone(false),
    []
  );

  const { data: others } = useQuery<QueryResponse>(
    {
      queryKey: [person.link, "contemporaries"],
      queryFn: () => fetch(
        urlcat("/api/contemporaries", person.link, { key, offset: contemporaries.length, ...params })
      ).then(
        res => res.json()
      ).then(
        data => {
          if (data.done) {
            setDone(true);
            setKey(undefined)
            setContemporaries([...contemporaries, ...data.contemporaries]);
          }
          else
            setKey(data.key)
          return data;
        }
      ),
      refetchOnWindowFocus: false,
      refetchInterval: 1000,
      enabled: !done,
      keepPreviousData: true
    }
  );

  const data = {
    ...person,
    initialKey,
    ...others
  }

  return (
    <>
      <Head>
        <title>{`${person.name} | Contemporaries Network`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <style>
          {`#map {
            height: 100%;
          }`}
        </style>
      </Head>
      <main>
        <Grid
          w="100vw"
          h="100vh"
          templateRows="min-content 1fr"
          templateColumns="1fr"
          templateAreas={`
        "header"
        "map"
      `}
          position="fixed"
          top="0"
        >
          <Nav title={person.name} gridArea="header" zIndex={10000} />
          <Map people={contemporaries} query={person} gridArea="map" />
        </Grid>
        <Box mt="calc(100vh - 100px)">
          <Box
            mt="calc(-100px - 2ex)"
            zIndex={100}
            position="relative"
          >
            <button onClick={onGetMore}>load more</button>
            <ul>
              {contemporaries.map(
                person => <li key={person.link}><Link href={`/test${person.link}`}>{person.name}</Link></li>
              )}
            </ul>
            <pre>
              {JSON.stringify(data, undefined, 2)}
            </pre>
          </Box>
        </Box>
        <ScrollToTopButton />
        {data && <ProgressModal
          loading={!data.done}
          state={data.state}
          progress={data.progress}
          total={data.total}
        />}
      </main>
    </>
  )
}

export const createQueryKey = async (params: PersonPageParams): Promise<string> => {
  const { person: query, ...args } = params
  const key = await fetch(
    urlcat("http://localhost:8000/api/contemporaries", query, args)
  ).then(async res => await res.json()).then(data => data.key)

  console.log(key);
  return key;
}

export async function getPersonData(query: string): Promise<PersonData | undefined> {
  return fetch(
    urlcat("http://localhost:8000/api/person", query)
  ).then(
    async res => {
      if (res.ok) {
        return await res.json()
      } else {
        return undefined;
      }
    }
  );
}

interface PersonPageParams {
  person: string;
  share_country?: boolean;
  share_job?: boolean;
  selected_countries?: string[];
  selected_jobs?: string[];
}

export const getServerSideProps: GetServerSideProps<PersonPageProps> = async (context) => {
  if (!context.params) {
    return {
      notFound: true
    }
  }
  const { person, ...params } = context.query;

  if (typeof person !== "string") {
    return {
      notFound: true
    }
  }

  const personData = await getPersonData(person)
  const jobKey = await createQueryKey({ person, ...params })

  if (!personData) {
    return {
      notFound: true
    }
  }
  return {
    props: {
      person: personData,
      jobKey
    }
  }
}

export default PersonPage;