import { useQuery } from "@tanstack/react-query";
import Head from 'next/head';
import { useRouter } from "next/router";
import { useCallback, useEffect, useMemo, useState } from "react";
import urlcat, { query } from "urlcat";

import { Box, Center, Container, Grid, Stack } from "@chakra-ui/react";
import { GetServerSideProps, NextPage } from "next";
import dynamic from "next/dynamic";
import { DownArrow } from "../components/DownArrow";
import { LoadMoreButton } from "../components/LoadMoreButton";
import Nav from '../components/Nav';
import { PersonCard } from '../components/PersonCard';
import ProgressModal from "../components/ProgressDialog";
import { ScrollToTopButton } from "../components/ScrollToTopButton";
import { MapContext } from "../contexts/MapContext";

const Map = dynamic(
  () => import("../Map"), { ssr: false }
)


type PersonData = {
  one_to_many?: string;
  many_to_one?: string;
  has_connections: boolean;
  name: string;
  description: string;
  gender: string;
  born_on?: string;
  died_on?: string;
  location?: [number, number];
  birth_year?: string;
  death_year?: string;
  wikipedia: string;
  image?: string;
  country?: string;
  rank: number;
  link: string;
  occupations: string[];
}

interface QueryPageProps {
  person: PersonData;
  jobKey: string;
}
interface QueryResponse {
  key: string,
  done: boolean,
  progress: number,
  total: number,
  state: string,
  contemporaries?: PersonData[]
}

export const QueryPage: NextPage<QueryPageProps> = ({ person, jobKey: initialKey }) => {
  const [done, setDone] = useState(false);
  const [key, setKey] = useState<string | undefined>(initialKey);
  const [contemporaries, setContemporaries] = useState<PersonData[]>([]);
  const router = useRouter();

  const { query: _, ...params } = router.query;

  useEffect(
    () => {
      setDone(false);
      setKey(initialKey);
      setContemporaries([]);
    },
    [initialKey]
  )
  const onGetMore = useCallback(
    () => setDone(false),
    []
  );


  const { data } = useQuery<QueryResponse>(
    {
      queryKey: [person.link, "contemporaries", initialKey],
      queryFn: () => fetch(
        urlcat(`/api/contemporaries`, person.link, { key, offset: contemporaries.length, ...params })
      ).then(
        res => res.json()
      ).then(
        data => {
          if (data.done) {
            setDone(true);
            setKey(undefined)
            setContemporaries([...contemporaries, ...data.contemporaries]);
          }
          else
            setKey(data.key)
          return data;
        }
      ),
      refetchOnWindowFocus: false,
      refetchInterval: 1000,
      enabled: !done,
      keepPreviousData: true
    }
  );

  const mappedPeople = useMemo(
    () => [...contemporaries.filter(c => !!c.location), { ...person, subjectMarker: true }],
    [contemporaries, person]
  );

  // const allPeople = !!query ? [...people, { ...query, subjectMarker: true }] : people;


  return (
    <>
      <Head>
        <title>{`${person.name} | Contemporaries Network`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <style>
          {`#map {
            height: 100%;
          }`}
        </style>
      </Head>
      <main>
        <MapContext data={mappedPeople}>
          <pre>{initialKey}</pre>
          <Grid
            w="100vw"
            h="100vh"
            templateRows="min-content 1fr"
            templateColumns="1fr"
            templateAreas={`
        "header"
        "map"
      `}
            position="fixed"
            top="0"
          >
            <Nav title={person.name} gridArea="header" zIndex={10000} />
            <Map gridArea="map" />
          </Grid>
          <Box mt="calc(100vh - 100px)">
            <Box
              mt="calc(-100px - 2ex)"
              zIndex={100}
              position="relative"
            >
              {contemporaries.length > 0 &&
                <Center
                  h="100px"
                  w="fit-content"
                  m="0 auto"
                  position="relative"
                  top="-50"
                  className="animate__animated animate__bounce"
                >
                  <DownArrow scrollDistance={400} />
                </Center>
              }
              <Container maxW="container.xl">
                <Stack spacing="4ex">
                  <PersonCard person={person} query={person} isHighlighted />
                  {contemporaries.map(contemporary => <PersonCard person={contemporary} query={person} key={contemporary.wikipedia} />)}
                  <Center pb="4ex">
                    {!!contemporaries && <LoadMoreButton fetching={!done} onLoadMore={onGetMore} />}
                  </Center>
                </Stack>
              </Container>
            </Box>
            <ScrollToTopButton />
            {data && <ProgressModal
              loading={!data.done}
              state={data.state}
              progress={data.progress}
              total={data.total}
            />}
          </Box>
        </MapContext>
      </main>
    </>
  )
}

export const createQueryKey = async (params: PersonPageParams): Promise<string> => {
  const { query, ...args } = params
  const key = await fetch(
    urlcat(`${process.env.API_ROOT}/contemporaries`, query, args)
  ).then(async res => await res.json()).then(data => data.key)

  console.log(key);
  return key;
}

export async function getPersonData(query: string): Promise<PersonData | undefined> {
  return fetch(
    urlcat(`${process.env.API_ROOT}/person`, query)
  ).then(
    async res => {
      if (res.ok) {
        return await res.json()
      } else {
        return undefined;
      }
    }
  );
}

interface PersonPageParams {
  query: string;
  share_country?: boolean;
  share_job?: boolean;
  selected_countries?: string[];
  selected_jobs?: string[];
}

export const getServerSideProps: GetServerSideProps<QueryPageProps> = async (context) => {
  if (!context.params) {
    return {
      notFound: true
    }
  }
  const { query, ...params } = context.query;

  if (typeof query !== "string") {
    return {
      notFound: true
    }
  }

  const personData = await getPersonData(query)
  const jobKey = await createQueryKey({ query, ...params })

  if (!personData) {
    return {
      notFound: true
    }
  }
  return {
    props: {
      person: personData,
      jobKey
    }
  }
}

export default QueryPage;